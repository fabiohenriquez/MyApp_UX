{"version":3,"sources":["components/Titulo_1.js","components/Inputs.js","components/Publicacion.js","components/Relleno.js","App.js","serviceWorker.js","index.js"],"names":["Titulo_1","className","href","class","id","React","Component","Inputs","state","Titulo","Nombre","Cuerpo","Estado","handleInputChange","bind","handleSubmit","e","preventDefault","this","props","onAddTodo","setState","target","value","name","console","log","onSubmit","type","description","onChange","placeholder","Publicacion","post","handleAddTodo","datosJson","JSON","stringify","localStorage","setItem","map","i","key","col","Relleno","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.25fc5999.chunk.js","sourcesContent":["import React from 'react';\nclass Titulo_1 extends React.Component {\n    render() {\n      return (\n          <nav className=\"#424242 grey darken-3\">\n        <nav className=\"navbar navbar-dark bg-dark\">\n                <a href=\"\" class=\"brand-logo center\">myNoteBook</a>\n\n                <nav>\n                  <div class=\"nav-wrapper\">\n                    <ul id=\"nav-mobile\" class=\"right hide-on-med-and-down\">\n                      <li><a href=\"\">Fabio Henriquez</a></li>\n                      <li><a href=\"\">11711109</a></li>\n                    </ul>\n                    </div>\n                </nav>\n          </nav>\n\n\n\n      </nav>\n      );\n    }\n  }\n\n\n  export default Titulo_1\n","import React from 'react';\r\n\r\n\r\nclass Inputs extends React.Component {\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n\r\n          Titulo: '',\r\n          Nombre: '',\r\n          Cuerpo: '',\r\n          Estado: ''\r\n        };\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n    }\r\n\r\n\r\n\r\n    handleSubmit(e) {\r\n\r\n        e.preventDefault();\r\n        this.props.onAddTodo(this.state);\r\n        this.setState({\r\n\r\n          Titulo: '',\r\n          Nombre: '',\r\n          Cuerpo: '',\r\n          Estado: ''\r\n        });\r\n\r\n\r\n\r\n    }\r\n\r\n    handleInputChange(e) {\r\n        const {value, name} = e.target;\r\n        console.log(value, name);\r\n        this.setState({\r\n          [name]: value\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n\r\n\r\n            <div className=\"card blue-grey darken-1\">\r\n\r\n            <form onSubmit={this.handleSubmit}>\r\n            <h5> - </h5>\r\n            <h5>Nueva Publicacion </h5>\r\n\r\n\r\n\r\n              <div>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"Nombre\"\r\n                  className=\"autocomplete\"\r\n                  value= {this.state.description}\r\n                  onChange={this.handleInputChange}\r\n                  placeholder=\"      Nombre\"\r\n                  />\r\n              </div>\r\n\r\n              <div>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"Cuerpo\"\r\n                  className=\"autocomplete\"\r\n                  value={this.state.description}\r\n                  onChange={this.handleInputChange}\r\n                  placeholder=\"      Cuerpo\"\r\n                  />\r\n              </div>\r\n\r\n              <div>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"Estado\"\r\n                  className=\"autocomplete\"\r\n                  value={this.state.description}\r\n                  onChange={this.handleInputChange}\r\n                  placeholder=\"     Estado de Animo\"\r\n                  />\r\n              </div>\r\n\r\n              <button type=\"submit\" className=\"btn waves-effect waves-light\">\r\n                Publicar\r\n              </button>\r\n              <h5> - </h5>\r\n            </form>\r\n          </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        );\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default Inputs\r\n","import React from 'react';\r\nimport {post} from '../post.json'\r\nimport Inputs from './Inputs.js';\r\n\r\n\r\nclass Publicacion extends React.Component {\r\n\r\n  constructor(){\r\n      super();\r\n      this.state={\r\n          post\r\n      };\r\n      this.handleAddTodo = this.handleAddTodo.bind(this);\r\n\r\n\r\n  }\r\n/////////////////// -------- LOCAL STORAGE --------------------////////////////\r\n  handleAddTodo(post) {\r\n\r\n\r\n      var datosJson= JSON.stringify(this.state.post);\r\n      localStorage.setItem('datosJson ', datosJson );\r\n\r\n      this.setState({\r\n\r\n\r\n\r\n        post: [...this.state.post, post]\r\n\r\n      })\r\n    }\r\n//////////////////////////-------\r\n\r\n      render(){\r\n\r\n\r\n          const post = this.state.post.map((post, i) => {\r\n              return (\r\n                      <div className=\"card mt.4\">\r\n                      <div class=\"card blue-grey darken-3\" key={i}>\r\n                          <div class=\"card-content white-text\">\r\n                          <span class=\"card-title\">\r\n                          <h5>{post.Titulo}</h5>\r\n                          </span>\r\n\r\n\r\n                          <div class=\"card-action\">\r\n                              {post.Nombre}\r\n                          </div>\r\n                          <div class=\"card-action\">\r\n                              {post.Cuerpo}\r\n                          </div>\r\n                          <div class=\"card-action\">\r\n                              {post.Estado}\r\n                          </div>\r\n                          </div>\r\n                      </div>\r\n                      </div>\r\n\r\n\r\n\r\n              )\r\n            })\r\n\r\n\r\n\r\n\r\n\r\n\r\n          return(\r\n\r\n\r\n                  <div className={this.props.col}>\r\n                      <Inputs onAddTodo={this.handleAddTodo} ></Inputs>\r\n                      <div className=\"divider\"></div>\r\n                      <div className=\"card blue-grey darken-4\">\r\n                           {post}\r\n                      </div>\r\n\r\n                  </div>\r\n\r\n                );\r\n            }\r\n        }\r\n\r\n\r\n  export default Publicacion\r\n","import React from 'react';\r\n\r\n\r\nclass Relleno extends React.Component {\r\n    render(){\r\n        return(\r\n\r\n            <div className={this.props.col}>\r\n                <div className=\"card blue-grey darken-1\">\r\n                    <div className=\"card-content white-text\">\r\n                    <span className=\"card-title\">\r\n                    <h4>Bienvenidos</h4></span>\r\n                    <h5>{this.props.name}\r\n                    </h5>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Relleno\r\n","import React,{Component} from 'react';\nimport './App.css';\nimport Titulo_1 from './components/Titulo_1';\n//import {post} from './post.json'\nimport Publicacion from './components/Publicacion';\nimport Relleno from './components/Relleno'\n\nclass App extends Component{\n  render(){\n    return (\n      <div className=\"App\">\n      <div className=\"row\">\n      <Titulo_1/>\n      </div>\n\n\n\n\n\n      <div className=\"row\">\n      <Relleno col=\"col s3\"/>\n      <Publicacion col=\"col s6\"/>\n      <Relleno col=\"col s3\"/>\n\n\n\n\n\n\n      </div>\n            </div>\n\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}